"use strict";const o=require("electron"),n=require("@electron-toolkit/preload"),c=require("crypto"),p="aes-256-ctr",s="vOVH6sdmpNWjRRIqCc7rdxs01lwHzfr3",i={ipc:(e,t)=>{n.electronAPI.ipcRenderer.send("MESSAGE",{channel:e,data:t})},update:e=>{n.electronAPI.ipcRenderer.send("UPDATE",{channel:e})},fetch:{get:e=>{const t={};return t.method="GET",n.electronAPI.ipcRenderer.invoke("FETCH",{path:e,option:t})},post:(e,t)=>{const r={};return r.method="POST",r.body=JSON.stringify(t),n.electronAPI.ipcRenderer.invoke("FETCH",{path:e,option:r})},put:(e,t)=>{const r={};return r.method="PUT",r.body=JSON.stringify(t),n.electronAPI.ipcRenderer.invoke("FETCH",{path:e,option:r})},patch:(e,t)=>{const r={};return r.method="PATCH",r.body=JSON.stringify(t),n.electronAPI.ipcRenderer.invoke("FETCH",{path:e,option:r})},delete:e=>{const t={};return t.method="DELETE",n.electronAPI.ipcRenderer.invoke("FETCH",{path:e,option:t})}},clipboard:e=>{o.clipboard.writeText(e)},encrypt:e=>{const t=c.randomBytes(16),r=c.createCipheriv(p,s,t),d=Buffer.concat([r.update(e),r.final()]);return{iv:t.toString("hex"),content:d.toString("hex")}}};if(process.contextIsolated)try{o.contextBridge.exposeInMainWorld("electron",n.electronAPI),o.contextBridge.exposeInMainWorld("api",i)}catch{}else window.electron=n.electronAPI,window.api=i;
